#!/usr/bin/env nodejs

var path = require('path');
var watch = require('watch');
var growl = require('growl');
var program = require('commander');
var less = require('less');
var Manager = require('../lib/manager');

program
  .usage('[options] <source_dir> [destination_dir]')
  .option('--interval <ms>', 'How often files are checked for changes', 100)
  .option('--no-watch', "Compile what needs to be compiled and exit")
  .parse(process.argv);

var srcDir = program.args[0] || process.cwd()
  , dstDir = program.args[1] || srcDir;

var monitorOptions = {
  interval: program.interval
};

var statusChar = {
  'success': '✓',
  'error': '✖',
  'skipped': 'o'
};

var colors = {
  'success': 32,
  'error': 31,
  'skipped': 36
};

var manager = new Manager(srcDir, dstDir);

function color(status, str) {
  return '\u001b[' + colors[status] + 'm' + str + '\u001b[0m';
}

function log(status, file, dstFile) {
  dstFile = dstFile || '';
  console.log(color(status, '%s %s -> %s'), statusChar[status], file, dstFile);
}

function notify(result, file, dstFile) {
  growl(file + ' -> ' + dstFile, {
    title: 'LESS',
    image: path.join(__dirname, '../images', result + '.svg')
  });
}

// FIXME: when https://github.com/mikeal/watch/issues/40 is fixed, use
// filter in monitorOptions instead
function fileFilter(file) {
  return /\.less$/.test(file);
}

function check(file) {
  if (fileFilter(file)) {
    console.log('Change detected in ' + file);
    manager.check(file);
  }
}

watch.createMonitor(srcDir, monitorOptions, function(monitor) {
  var files = Object.keys(monitor.files).filter(fileFilter);

  manager.on('lessError', less.writeError);
  manager.on('checked', log);

  console.log('Finding files...');

  manager.addFiles(files, function() {
    manager.compileAll(function(errors) {
      if (!program.watch) process.exit(errors);

      monitor.on('changed', check);
      monitor.on('created', check);

      manager.on('checked', notify);

      console.log('Monitoring files in ' + srcDir);
    });
  });
});

