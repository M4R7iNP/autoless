#!/usr/bin/env nodejs

var fs = require('fs')
  , path = require('path')
  , watch = require('watch')
  , growl = require('growl')
  , program = require('commander')
  , less = require('less');

program
  .usage('[options] <source_dir> [destination_dir]')
  .option('--ignore <regexp>', 'Pattern for ignored files', RegExp)
  .option('--interval <ms>', 'How often files are checked for changes', 100)
  .parse(process.argv);

var srcDir = program.args[0] || process.cwd()
  , dstDir = program.args[1] || srcDir;

watch.createMonitor(srcDir, { interval: program.interval }, function(monitor) {
  function compileLess(file) {
    var match = file.match(/^(.*)(\.[^\.]*)$/)
      , base = match[1]
      , ext = match[2]
      , dstFile = path.join(dstDir, base.slice(srcDir.length) + '.css');

    function notify(result) {
      growl(file + '\n-> ' + dstFile, {
        title: 'LESS',
        image: path.join(__dirname, '../images', result + '.svg')
      });
      console.log(result + ': ' + file + ' -> ' + dstFile);
    }

    if (ext !== '.less' || (options.ignore && options.ignore.test(file))) {
      return;
    }

    new less.Parser({
      paths: path.dirname(file),
      filename: file
    }).parse(fs.readFileSync(file, 'utf-8'), function(err, tree) {
      if (err) {
        less.writeError(err);
        notify('error');
      } else {
        try {
          fs.writeFileSync(dstFile, tree.toCSS(), 'utf-8');
          notify('success');
        } catch (err) {
          less.writeError(err);
          notify('error');
        }
      }
    });
  }

  monitor.on('changed', compileLess);
  monitor.on('created', compileLess);
  console.log('Monitoring files in ' + srcDir);
});

