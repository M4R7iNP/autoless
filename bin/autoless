#!/usr/bin/env nodejs

var path = require('path')
  , watch = require('watch')
  , growl = require('growl')
  , program = require('commander')
  , less = require('less')
  , Manager = require('../lib/manager');

program
  .usage('[options] <source_dir> [destination_dir]')
  .option('--ignore <regexp>', 'Pattern for ignored files', RegExp)
  .option('--interval <ms>', 'How often files are checked for changes', 100)
  .option('--no-watch', "Compile what needs to be compiled and exit")
  .parse(process.argv);

var srcDir = program.args[0] || process.cwd()
  , dstDir = program.args[1] || srcDir;

var monitorOptions = {
  interval: program.interval
};

var manager = new Manager(srcDir, dstDir);

function log(file, dstFile, result) {
  console.log(file + ' -> ' + dstFile + ': ' + result.toUpperCase());
}

function notify(file, dstFile, result) {
  growl(file + '\n-> ' + dstFile, {
    title: 'LESS',
    image: path.join(__dirname, '../images', result + '.svg')
  });
}

// FIXME: when https://github.com/mikeal/watch/issues/40 is fixed, use
// filter in monitorOptions instead
function fileFilter(file) {
  return /\.less$/.test(file) && !(program.ignore && program.ignore.test(file));
}

function check(file) {
  if (fileFilter(file)) {
  console.log(file);
    manager.check(file);
  }
}

watch.createMonitor(srcDir, monitorOptions, function(monitor) {
  var files = Object.keys(monitor.files).filter(fileFilter);

  manager.on('lessError', less.writeError);
  manager.on('checked', log);

  console.log('Finding files...');

  manager.addFiles(files, function() {
    manager.compileAll(function(err) {
      if (!program.watch) process.exit(err ? 1 : 0);

      monitor.on('changed', check);
      monitor.on('created', check);

      manager.on('checked', notify);

      console.log('Monitoring files in ' + srcDir);
    });
  });
});

