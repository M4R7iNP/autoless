#!/usr/bin/env nodejs

var fs = require('fs')
  , path = require('path')
  , watch = require('watch')
  , growl = require('growl')
  , program = require('commander')
  , less = require('less');

program
  .usage('[options] <source_dir> [destination_dir]')
  .option('--ignore <regexp>', 'Pattern for ignored files', RegExp)
  .option('--interval <ms>', 'How often files are checked for changes', 100)
  .option('--no-watch', "Compile what needs to be compiled and exit")
  .parse(process.argv);

var srcDir = program.args[0] || process.cwd()
  , dstDir = program.args[1] || srcDir
  , pending = 0;

var monitorOptions = {
  interval: program.interval
};

function compileLess(file, dstFile, callback) {
  function notify(result) {
    console.log(file + ' -> ' + dstFile + ': ' + result.toUpperCase());
    if (!callback) {
      growl(file + '\n-> ' + dstFile, {
        title: 'LESS',
        image: path.join(__dirname, '../images', result + '.svg')
      });
    }
  }

  function done(err) {
    if (err) {
      notify('error');
      less.writeError(err);
    } else {
      notify('success');
    }
    --pending;
    if (callback) callback(err);
  }

  ++pending;

  new less.Parser({
    paths: path.dirname(file),
    filename: file
  }).parse(fs.readFileSync(file, 'utf-8'), function(err, tree) {
    if (err) {
      done(err);
    } else {
      try {
        fs.writeFileSync(dstFile, tree.toCSS(), 'utf-8');
        done();
      } catch (err) {
        done(err);
      }
    }
  });
}

function takeAction(file, stat, callback) {
  if (stat.isDirectory()) return;
  // FIXME: when https://github.com/mikeal/watch/issues/40 is fixed, use
  // filter in monitorOptions instead
  if (!/\.less$/.test(file) || (program.ignore && program.ignore.test(file))) {
    return;
  }

  var match = file.match(/^(.*)(\.[^\.]*)$/)
  , base = match[1]
  , ext = match[2]
  , dstFile = path.join(dstDir, base.slice(srcDir.length) + '.css');

  compileLess(file, dstFile, callback);
}

watch.createMonitor(srcDir, monitorOptions, function(monitor) {
  monitor.on('changed', takeAction);
  monitor.on('created', takeAction);
  console.log('Monitoring files in ' + srcDir);

  for (var file in monitor.files) {
    takeAction(file, monitor.files[file], function(err) {
      if (!program.watch && pending === 0) process.exit(err ? 1 : 0);
    });
  }

  if (!program.watch && pending === 0) process.exit(0);
});

